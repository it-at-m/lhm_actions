name: Npm Release

inputs:
  node-version:
    required: false
    default: "22.11.0"
    type: string
    description: node version
  app-path:
    required: true
    type: string
    description: path where the package.json is located
  releaseVersion:
    type: choice
    description: Select version increment type (follows Semantic Versioning)
    required: true
    options:
      - patch
      - minor
      - major
  npm-token:
    type: string
    required: true
    description: npm token for release
  use-pr:
    default: false
    type: boolean
    description: use PR for version bump instead of direct push
outputs:
  ARTIFACT_VERSION:
    description: version of the artifact upload
    value: ${{steps.node-release.outputs.VERSION}}
runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - name: Set up Node.js
      uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4.3.0
      with:
        node-version: "${{ inputs.node-version }}"
        registry-url: "https://registry.npmjs.org"
        cache: "npm"
        cache-dependency-path: "./${{inputs.app-path}}/package-lock.json"
    - id: node-release
      name: Bump version and create git tag
      working-directory: ./${{inputs.app-path}}
      shell: bash
      run: |
        NEW_VERSION=$(npm version ${{inputs.releaseVersion}}) || exit 1
        echo "VERSION=$NEW_VERSION" >> "$GITHUB_OUTPUT"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        git config --global user.email "github-actions@github.com"
        git config --global user.name "GitHub Actions"
        git add package.json package-lock.json
        git commit -m "chore(${{ inputs.app-path }}): bump version to ${NEW_VERSION}" || exit 1

    - name: Push changes
      if: ${{ inputs.use-pr != 'true' }}
      shell: bash
      run: git push || exit 1

    - name: Check for changes
      if: ${{ inputs.use-pr == 'true' }}
      shell: bash
      run: |
        if [[ -n $(git status --porcelain) ]]; then
          echo "Changes detected."
          echo "GIT_CHANGES=true" >> $GITHUB_ENV
        else
          echo "No changes detected."
          echo "GIT_CHANGES=false" >> $GITHUB_ENV
        fi
    - name: Push changes to new branch
      if: ${{ inputs.use-pr == 'true' && env.GIT_CHANGES == 'true' }}
      shell: bash
      run: |
        BRANCH_NAME=$(echo "release-${{ inputs.app-path }}-${{ inputs.releaseVersion }}" | sed 's/[^a-zA-Z0-9-]/-/g')
        echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
        git checkout -b "${BRANCH_NAME}"
        git push --force origin "${BRANCH_NAME}"
    - name: Create pull request
      if: ${{ inputs.use-pr == 'true' && env.GIT_CHANGES == 'true' }}
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        script: |
          const { repo, owner } = context.repo;
          const { data: pullRequest } = await github.rest.pulls.create({
            title: 'chore: bump release version ${{ inputs.module }}',
            owner,
            repo,
            head: '${{ env.BRANCH_NAME }}',
            base: '${{ github.ref_name }}',
            body: [
              'This PR is auto-generated'
            ].join('\n'),
          });
          await github.rest.issues.addAssignees({
            owner,
            repo,
            issue_number: pullRequest.number,
            assignees: ['${{ github.actor }}'],
          });
          console.log(`Pull Request created: ${pullRequest.html_url}`);
